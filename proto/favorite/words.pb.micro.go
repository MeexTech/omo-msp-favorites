// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/words.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WordsService service

type WordsService interface {
	AddOne(ctx context.Context, in *ReqWordsAdd, opts ...client.CallOption) (*ReplyWordsInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyWordsInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyWordsList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type wordsService struct {
	c    client.Client
	name string
}

func NewWordsService(name string, c client.Client) WordsService {
	return &wordsService{
		c:    c,
		name: name,
	}
}

func (c *wordsService) AddOne(ctx context.Context, in *ReqWordsAdd, opts ...client.CallOption) (*ReplyWordsInfo, error) {
	req := c.c.NewRequest(c.name, "WordsService.AddOne", in)
	out := new(ReplyWordsInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyWordsInfo, error) {
	req := c.c.NewRequest(c.name, "WordsService.GetOne", in)
	out := new(ReplyWordsInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyWordsList, error) {
	req := c.c.NewRequest(c.name, "WordsService.GetByFilter", in)
	out := new(ReplyWordsList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "WordsService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "WordsService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordsService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "WordsService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordsService service

type WordsServiceHandler interface {
	AddOne(context.Context, *ReqWordsAdd, *ReplyWordsInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyWordsInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyWordsList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterWordsServiceHandler(s server.Server, hdlr WordsServiceHandler, opts ...server.HandlerOption) error {
	type wordsService interface {
		AddOne(ctx context.Context, in *ReqWordsAdd, out *ReplyWordsInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyWordsInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyWordsList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type WordsService struct {
		wordsService
	}
	h := &wordsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WordsService{h}, opts...))
}

type wordsServiceHandler struct {
	WordsServiceHandler
}

func (h *wordsServiceHandler) AddOne(ctx context.Context, in *ReqWordsAdd, out *ReplyWordsInfo) error {
	return h.WordsServiceHandler.AddOne(ctx, in, out)
}

func (h *wordsServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyWordsInfo) error {
	return h.WordsServiceHandler.GetOne(ctx, in, out)
}

func (h *wordsServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyWordsList) error {
	return h.WordsServiceHandler.GetByFilter(ctx, in, out)
}

func (h *wordsServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.WordsServiceHandler.GetStatistic(ctx, in, out)
}

func (h *wordsServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.WordsServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *wordsServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.WordsServiceHandler.RemoveOne(ctx, in, out)
}
