// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/activity.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ActivityService service

type ActivityService interface {
	AddOne(ctx context.Context, in *ReqActivityAdd, opts ...client.CallOption) (*ReplyActivityInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyActivityInfo, error)
	GetList(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyActivityList, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyActivityList, error)
	UpdateBase(ctx context.Context, in *ReqActivityUpdate, opts ...client.CallOption) (*ReplyActivityInfo, error)
	UpdateTags(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
	UpdateAssets(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
	UpdateTargets(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
	UpdateStatus(ctx context.Context, in *ReqActivityState, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	AppendOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPairList, error)
	SubtractOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPairList, error)
}

type activityService struct {
	c    client.Client
	name string
}

func NewActivityService(name string, c client.Client) ActivityService {
	return &activityService{
		c:    c,
		name: name,
	}
}

func (c *activityService) AddOne(ctx context.Context, in *ReqActivityAdd, opts ...client.CallOption) (*ReplyActivityInfo, error) {
	req := c.c.NewRequest(c.name, "ActivityService.AddOne", in)
	out := new(ReplyActivityInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyActivityInfo, error) {
	req := c.c.NewRequest(c.name, "ActivityService.GetOne", in)
	out := new(ReplyActivityInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetList(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyActivityList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.GetList", in)
	out := new(ReplyActivityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyActivityList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.GetByFilter", in)
	out := new(ReplyActivityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) UpdateBase(ctx context.Context, in *ReqActivityUpdate, opts ...client.CallOption) (*ReplyActivityInfo, error) {
	req := c.c.NewRequest(c.name, "ActivityService.UpdateBase", in)
	out := new(ReplyActivityInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) UpdateTags(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.UpdateTags", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) UpdateAssets(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.UpdateAssets", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) UpdateTargets(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.UpdateTargets", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) UpdateStatus(ctx context.Context, in *ReqActivityState, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ActivityService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ActivityService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) AppendOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPairList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.AppendOne", in)
	out := new(ReplyPairList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) SubtractOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPairList, error) {
	req := c.c.NewRequest(c.name, "ActivityService.SubtractOne", in)
	out := new(ReplyPairList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActivityService service

type ActivityServiceHandler interface {
	AddOne(context.Context, *ReqActivityAdd, *ReplyActivityInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyActivityInfo) error
	GetList(context.Context, *RequestInfo, *ReplyActivityList) error
	GetByFilter(context.Context, *RequestFilter, *ReplyActivityList) error
	UpdateBase(context.Context, *ReqActivityUpdate, *ReplyActivityInfo) error
	UpdateTags(context.Context, *RequestList, *ReplyList) error
	UpdateAssets(context.Context, *RequestList, *ReplyList) error
	UpdateTargets(context.Context, *RequestList, *ReplyList) error
	UpdateStatus(context.Context, *ReqActivityState, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	AppendOne(context.Context, *RequestInfo, *ReplyPairList) error
	SubtractOne(context.Context, *RequestInfo, *ReplyPairList) error
}

func RegisterActivityServiceHandler(s server.Server, hdlr ActivityServiceHandler, opts ...server.HandlerOption) error {
	type activityService interface {
		AddOne(ctx context.Context, in *ReqActivityAdd, out *ReplyActivityInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyActivityInfo) error
		GetList(ctx context.Context, in *RequestInfo, out *ReplyActivityList) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyActivityList) error
		UpdateBase(ctx context.Context, in *ReqActivityUpdate, out *ReplyActivityInfo) error
		UpdateTags(ctx context.Context, in *RequestList, out *ReplyList) error
		UpdateAssets(ctx context.Context, in *RequestList, out *ReplyList) error
		UpdateTargets(ctx context.Context, in *RequestList, out *ReplyList) error
		UpdateStatus(ctx context.Context, in *ReqActivityState, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		AppendOne(ctx context.Context, in *RequestInfo, out *ReplyPairList) error
		SubtractOne(ctx context.Context, in *RequestInfo, out *ReplyPairList) error
	}
	type ActivityService struct {
		activityService
	}
	h := &activityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ActivityService{h}, opts...))
}

type activityServiceHandler struct {
	ActivityServiceHandler
}

func (h *activityServiceHandler) AddOne(ctx context.Context, in *ReqActivityAdd, out *ReplyActivityInfo) error {
	return h.ActivityServiceHandler.AddOne(ctx, in, out)
}

func (h *activityServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyActivityInfo) error {
	return h.ActivityServiceHandler.GetOne(ctx, in, out)
}

func (h *activityServiceHandler) GetList(ctx context.Context, in *RequestInfo, out *ReplyActivityList) error {
	return h.ActivityServiceHandler.GetList(ctx, in, out)
}

func (h *activityServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyActivityList) error {
	return h.ActivityServiceHandler.GetByFilter(ctx, in, out)
}

func (h *activityServiceHandler) UpdateBase(ctx context.Context, in *ReqActivityUpdate, out *ReplyActivityInfo) error {
	return h.ActivityServiceHandler.UpdateBase(ctx, in, out)
}

func (h *activityServiceHandler) UpdateTags(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.ActivityServiceHandler.UpdateTags(ctx, in, out)
}

func (h *activityServiceHandler) UpdateAssets(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.ActivityServiceHandler.UpdateAssets(ctx, in, out)
}

func (h *activityServiceHandler) UpdateTargets(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.ActivityServiceHandler.UpdateTargets(ctx, in, out)
}

func (h *activityServiceHandler) UpdateStatus(ctx context.Context, in *ReqActivityState, out *ReplyInfo) error {
	return h.ActivityServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *activityServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ActivityServiceHandler.RemoveOne(ctx, in, out)
}

func (h *activityServiceHandler) AppendOne(ctx context.Context, in *RequestInfo, out *ReplyPairList) error {
	return h.ActivityServiceHandler.AppendOne(ctx, in, out)
}

func (h *activityServiceHandler) SubtractOne(ctx context.Context, in *RequestInfo, out *ReplyPairList) error {
	return h.ActivityServiceHandler.SubtractOne(ctx, in, out)
}
