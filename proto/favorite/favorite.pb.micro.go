// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/favorite.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FavoriteService service

type FavoriteService interface {
	AddOne(ctx context.Context, in *ReqFavoriteAdd, opts ...client.CallOption) (*ReplyFavoriteInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteInfo, error)
	GetByOrigin(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteInfo, error)
	GetList(ctx context.Context, in *ReqFavoriteList, opts ...client.CallOption) (*ReplyFavoriteList, error)
	GetByList(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyFavoriteList, error)
	UpdateBase(ctx context.Context, in *ReqFavoriteUpdate, opts ...client.CallOption) (*ReplyFavoriteInfo, error)
	UpdateTags(ctx context.Context, in *ReqFavoriteTags, opts ...client.CallOption) (*ReplyFavoriteInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateKeys(ctx context.Context, in *ReqFavoriteKeys, opts ...client.CallOption) (*ReplyFavoriteKeys, error)
	AppendEntity(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteKeys, error)
	SubtractEntity(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteKeys, error)
}

type favoriteService struct {
	c    client.Client
	name string
}

func NewFavoriteService(name string, c client.Client) FavoriteService {
	return &favoriteService{
		c:    c,
		name: name,
	}
}

func (c *favoriteService) AddOne(ctx context.Context, in *ReqFavoriteAdd, opts ...client.CallOption) (*ReplyFavoriteInfo, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.AddOne", in)
	out := new(ReplyFavoriteInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteInfo, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.GetOne", in)
	out := new(ReplyFavoriteInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) GetByOrigin(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteInfo, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.GetByOrigin", in)
	out := new(ReplyFavoriteInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) GetList(ctx context.Context, in *ReqFavoriteList, opts ...client.CallOption) (*ReplyFavoriteList, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.GetList", in)
	out := new(ReplyFavoriteList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) GetByList(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyFavoriteList, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.GetByList", in)
	out := new(ReplyFavoriteList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) UpdateBase(ctx context.Context, in *ReqFavoriteUpdate, opts ...client.CallOption) (*ReplyFavoriteInfo, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.UpdateBase", in)
	out := new(ReplyFavoriteInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) UpdateTags(ctx context.Context, in *ReqFavoriteTags, opts ...client.CallOption) (*ReplyFavoriteInfo, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.UpdateTags", in)
	out := new(ReplyFavoriteInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) UpdateKeys(ctx context.Context, in *ReqFavoriteKeys, opts ...client.CallOption) (*ReplyFavoriteKeys, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.UpdateKeys", in)
	out := new(ReplyFavoriteKeys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) AppendEntity(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteKeys, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.AppendEntity", in)
	out := new(ReplyFavoriteKeys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteService) SubtractEntity(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFavoriteKeys, error) {
	req := c.c.NewRequest(c.name, "FavoriteService.SubtractEntity", in)
	out := new(ReplyFavoriteKeys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FavoriteService service

type FavoriteServiceHandler interface {
	AddOne(context.Context, *ReqFavoriteAdd, *ReplyFavoriteInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyFavoriteInfo) error
	GetByOrigin(context.Context, *RequestInfo, *ReplyFavoriteInfo) error
	GetList(context.Context, *ReqFavoriteList, *ReplyFavoriteList) error
	GetByList(context.Context, *RequestList, *ReplyFavoriteList) error
	UpdateBase(context.Context, *ReqFavoriteUpdate, *ReplyFavoriteInfo) error
	UpdateTags(context.Context, *ReqFavoriteTags, *ReplyFavoriteInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateKeys(context.Context, *ReqFavoriteKeys, *ReplyFavoriteKeys) error
	AppendEntity(context.Context, *RequestInfo, *ReplyFavoriteKeys) error
	SubtractEntity(context.Context, *RequestInfo, *ReplyFavoriteKeys) error
}

func RegisterFavoriteServiceHandler(s server.Server, hdlr FavoriteServiceHandler, opts ...server.HandlerOption) error {
	type favoriteService interface {
		AddOne(ctx context.Context, in *ReqFavoriteAdd, out *ReplyFavoriteInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyFavoriteInfo) error
		GetByOrigin(ctx context.Context, in *RequestInfo, out *ReplyFavoriteInfo) error
		GetList(ctx context.Context, in *ReqFavoriteList, out *ReplyFavoriteList) error
		GetByList(ctx context.Context, in *RequestList, out *ReplyFavoriteList) error
		UpdateBase(ctx context.Context, in *ReqFavoriteUpdate, out *ReplyFavoriteInfo) error
		UpdateTags(ctx context.Context, in *ReqFavoriteTags, out *ReplyFavoriteInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateKeys(ctx context.Context, in *ReqFavoriteKeys, out *ReplyFavoriteKeys) error
		AppendEntity(ctx context.Context, in *RequestInfo, out *ReplyFavoriteKeys) error
		SubtractEntity(ctx context.Context, in *RequestInfo, out *ReplyFavoriteKeys) error
	}
	type FavoriteService struct {
		favoriteService
	}
	h := &favoriteServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FavoriteService{h}, opts...))
}

type favoriteServiceHandler struct {
	FavoriteServiceHandler
}

func (h *favoriteServiceHandler) AddOne(ctx context.Context, in *ReqFavoriteAdd, out *ReplyFavoriteInfo) error {
	return h.FavoriteServiceHandler.AddOne(ctx, in, out)
}

func (h *favoriteServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyFavoriteInfo) error {
	return h.FavoriteServiceHandler.GetOne(ctx, in, out)
}

func (h *favoriteServiceHandler) GetByOrigin(ctx context.Context, in *RequestInfo, out *ReplyFavoriteInfo) error {
	return h.FavoriteServiceHandler.GetByOrigin(ctx, in, out)
}

func (h *favoriteServiceHandler) GetList(ctx context.Context, in *ReqFavoriteList, out *ReplyFavoriteList) error {
	return h.FavoriteServiceHandler.GetList(ctx, in, out)
}

func (h *favoriteServiceHandler) GetByList(ctx context.Context, in *RequestList, out *ReplyFavoriteList) error {
	return h.FavoriteServiceHandler.GetByList(ctx, in, out)
}

func (h *favoriteServiceHandler) UpdateBase(ctx context.Context, in *ReqFavoriteUpdate, out *ReplyFavoriteInfo) error {
	return h.FavoriteServiceHandler.UpdateBase(ctx, in, out)
}

func (h *favoriteServiceHandler) UpdateTags(ctx context.Context, in *ReqFavoriteTags, out *ReplyFavoriteInfo) error {
	return h.FavoriteServiceHandler.UpdateTags(ctx, in, out)
}

func (h *favoriteServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.FavoriteServiceHandler.RemoveOne(ctx, in, out)
}

func (h *favoriteServiceHandler) UpdateKeys(ctx context.Context, in *ReqFavoriteKeys, out *ReplyFavoriteKeys) error {
	return h.FavoriteServiceHandler.UpdateKeys(ctx, in, out)
}

func (h *favoriteServiceHandler) AppendEntity(ctx context.Context, in *RequestInfo, out *ReplyFavoriteKeys) error {
	return h.FavoriteServiceHandler.AppendEntity(ctx, in, out)
}

func (h *favoriteServiceHandler) SubtractEntity(ctx context.Context, in *RequestInfo, out *ReplyFavoriteKeys) error {
	return h.FavoriteServiceHandler.SubtractEntity(ctx, in, out)
}
