// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/sheet.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SheetService service

type SheetService interface {
	AddOne(ctx context.Context, in *ReqSheetAdd, opts ...client.CallOption) (*ReplySheetInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySheetInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplySheetList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateBase(ctx context.Context, in *ReqSheetUpdate, opts ...client.CallOption) (*ReplySheetInfo, error)
	UpdateStatus(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateContents(ctx context.Context, in *ReqSheetContents, opts ...client.CallOption) (*ReplySheetContent, error)
	AppendContent(ctx context.Context, in *ReqSheetContent, opts ...client.CallOption) (*ReplySheetContent, error)
	SubtractContent(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySheetContent, error)
}

type sheetService struct {
	c    client.Client
	name string
}

func NewSheetService(name string, c client.Client) SheetService {
	return &sheetService{
		c:    c,
		name: name,
	}
}

func (c *sheetService) AddOne(ctx context.Context, in *ReqSheetAdd, opts ...client.CallOption) (*ReplySheetInfo, error) {
	req := c.c.NewRequest(c.name, "SheetService.AddOne", in)
	out := new(ReplySheetInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySheetInfo, error) {
	req := c.c.NewRequest(c.name, "SheetService.GetOne", in)
	out := new(ReplySheetInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplySheetList, error) {
	req := c.c.NewRequest(c.name, "SheetService.GetByFilter", in)
	out := new(ReplySheetList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "SheetService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SheetService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) UpdateBase(ctx context.Context, in *ReqSheetUpdate, opts ...client.CallOption) (*ReplySheetInfo, error) {
	req := c.c.NewRequest(c.name, "SheetService.UpdateBase", in)
	out := new(ReplySheetInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) UpdateStatus(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SheetService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "SheetService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) UpdateContents(ctx context.Context, in *ReqSheetContents, opts ...client.CallOption) (*ReplySheetContent, error) {
	req := c.c.NewRequest(c.name, "SheetService.UpdateContents", in)
	out := new(ReplySheetContent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) AppendContent(ctx context.Context, in *ReqSheetContent, opts ...client.CallOption) (*ReplySheetContent, error) {
	req := c.c.NewRequest(c.name, "SheetService.AppendContent", in)
	out := new(ReplySheetContent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetService) SubtractContent(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySheetContent, error) {
	req := c.c.NewRequest(c.name, "SheetService.SubtractContent", in)
	out := new(ReplySheetContent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SheetService service

type SheetServiceHandler interface {
	AddOne(context.Context, *ReqSheetAdd, *ReplySheetInfo) error
	GetOne(context.Context, *RequestInfo, *ReplySheetInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplySheetList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateBase(context.Context, *ReqSheetUpdate, *ReplySheetInfo) error
	UpdateStatus(context.Context, *RequestState, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateContents(context.Context, *ReqSheetContents, *ReplySheetContent) error
	AppendContent(context.Context, *ReqSheetContent, *ReplySheetContent) error
	SubtractContent(context.Context, *RequestInfo, *ReplySheetContent) error
}

func RegisterSheetServiceHandler(s server.Server, hdlr SheetServiceHandler, opts ...server.HandlerOption) error {
	type sheetService interface {
		AddOne(ctx context.Context, in *ReqSheetAdd, out *ReplySheetInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplySheetInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplySheetList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateBase(ctx context.Context, in *ReqSheetUpdate, out *ReplySheetInfo) error
		UpdateStatus(ctx context.Context, in *RequestState, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateContents(ctx context.Context, in *ReqSheetContents, out *ReplySheetContent) error
		AppendContent(ctx context.Context, in *ReqSheetContent, out *ReplySheetContent) error
		SubtractContent(ctx context.Context, in *RequestInfo, out *ReplySheetContent) error
	}
	type SheetService struct {
		sheetService
	}
	h := &sheetServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SheetService{h}, opts...))
}

type sheetServiceHandler struct {
	SheetServiceHandler
}

func (h *sheetServiceHandler) AddOne(ctx context.Context, in *ReqSheetAdd, out *ReplySheetInfo) error {
	return h.SheetServiceHandler.AddOne(ctx, in, out)
}

func (h *sheetServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplySheetInfo) error {
	return h.SheetServiceHandler.GetOne(ctx, in, out)
}

func (h *sheetServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplySheetList) error {
	return h.SheetServiceHandler.GetByFilter(ctx, in, out)
}

func (h *sheetServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.SheetServiceHandler.GetStatistic(ctx, in, out)
}

func (h *sheetServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.SheetServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *sheetServiceHandler) UpdateBase(ctx context.Context, in *ReqSheetUpdate, out *ReplySheetInfo) error {
	return h.SheetServiceHandler.UpdateBase(ctx, in, out)
}

func (h *sheetServiceHandler) UpdateStatus(ctx context.Context, in *RequestState, out *ReplyInfo) error {
	return h.SheetServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *sheetServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.SheetServiceHandler.RemoveOne(ctx, in, out)
}

func (h *sheetServiceHandler) UpdateContents(ctx context.Context, in *ReqSheetContents, out *ReplySheetContent) error {
	return h.SheetServiceHandler.UpdateContents(ctx, in, out)
}

func (h *sheetServiceHandler) AppendContent(ctx context.Context, in *ReqSheetContent, out *ReplySheetContent) error {
	return h.SheetServiceHandler.AppendContent(ctx, in, out)
}

func (h *sheetServiceHandler) SubtractContent(ctx context.Context, in *RequestInfo, out *ReplySheetContent) error {
	return h.SheetServiceHandler.SubtractContent(ctx, in, out)
}
