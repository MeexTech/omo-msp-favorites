// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/slots.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SlotService service

type SlotService interface {
	AddOne(ctx context.Context, in *ReqSlotAdd, opts ...client.CallOption) (*ReplySlotInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySlotInfo, error)
	GetList(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySlotList, error)
	UpdateBase(ctx context.Context, in *ReqSlotUpdate, opts ...client.CallOption) (*ReplySlotInfo, error)
	UpdateKeywords(ctx context.Context, in *ReqSlotKeywords, opts ...client.CallOption) (*ReplySlotInfo, error)
}

type slotService struct {
	c    client.Client
	name string
}

func NewSlotService(name string, c client.Client) SlotService {
	return &slotService{
		c:    c,
		name: name,
	}
}

func (c *slotService) AddOne(ctx context.Context, in *ReqSlotAdd, opts ...client.CallOption) (*ReplySlotInfo, error) {
	req := c.c.NewRequest(c.name, "SlotService.AddOne", in)
	out := new(ReplySlotInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySlotInfo, error) {
	req := c.c.NewRequest(c.name, "SlotService.GetOne", in)
	out := new(ReplySlotInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotService) GetList(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplySlotList, error) {
	req := c.c.NewRequest(c.name, "SlotService.GetList", in)
	out := new(ReplySlotList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotService) UpdateBase(ctx context.Context, in *ReqSlotUpdate, opts ...client.CallOption) (*ReplySlotInfo, error) {
	req := c.c.NewRequest(c.name, "SlotService.UpdateBase", in)
	out := new(ReplySlotInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slotService) UpdateKeywords(ctx context.Context, in *ReqSlotKeywords, opts ...client.CallOption) (*ReplySlotInfo, error) {
	req := c.c.NewRequest(c.name, "SlotService.UpdateKeywords", in)
	out := new(ReplySlotInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SlotService service

type SlotServiceHandler interface {
	AddOne(context.Context, *ReqSlotAdd, *ReplySlotInfo) error
	GetOne(context.Context, *RequestInfo, *ReplySlotInfo) error
	GetList(context.Context, *RequestInfo, *ReplySlotList) error
	UpdateBase(context.Context, *ReqSlotUpdate, *ReplySlotInfo) error
	UpdateKeywords(context.Context, *ReqSlotKeywords, *ReplySlotInfo) error
}

func RegisterSlotServiceHandler(s server.Server, hdlr SlotServiceHandler, opts ...server.HandlerOption) error {
	type slotService interface {
		AddOne(ctx context.Context, in *ReqSlotAdd, out *ReplySlotInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplySlotInfo) error
		GetList(ctx context.Context, in *RequestInfo, out *ReplySlotList) error
		UpdateBase(ctx context.Context, in *ReqSlotUpdate, out *ReplySlotInfo) error
		UpdateKeywords(ctx context.Context, in *ReqSlotKeywords, out *ReplySlotInfo) error
	}
	type SlotService struct {
		slotService
	}
	h := &slotServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SlotService{h}, opts...))
}

type slotServiceHandler struct {
	SlotServiceHandler
}

func (h *slotServiceHandler) AddOne(ctx context.Context, in *ReqSlotAdd, out *ReplySlotInfo) error {
	return h.SlotServiceHandler.AddOne(ctx, in, out)
}

func (h *slotServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplySlotInfo) error {
	return h.SlotServiceHandler.GetOne(ctx, in, out)
}

func (h *slotServiceHandler) GetList(ctx context.Context, in *RequestInfo, out *ReplySlotList) error {
	return h.SlotServiceHandler.GetList(ctx, in, out)
}

func (h *slotServiceHandler) UpdateBase(ctx context.Context, in *ReqSlotUpdate, out *ReplySlotInfo) error {
	return h.SlotServiceHandler.UpdateBase(ctx, in, out)
}

func (h *slotServiceHandler) UpdateKeywords(ctx context.Context, in *ReqSlotKeywords, out *ReplySlotInfo) error {
	return h.SlotServiceHandler.UpdateKeywords(ctx, in, out)
}
