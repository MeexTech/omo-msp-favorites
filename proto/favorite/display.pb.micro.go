// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/display.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DisplayService service

type DisplayService interface {
	AddOne(ctx context.Context, in *ReqDisplayAdd, opts ...client.CallOption) (*ReplyDisplayInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayInfo, error)
	GetByOrigin(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayInfo, error)
	GetList(ctx context.Context, in *ReqDisplayList, opts ...client.CallOption) (*ReplyDisplayList, error)
	GetByList(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyDisplayList, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyDisplayList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateBase(ctx context.Context, in *ReqDisplayUpdate, opts ...client.CallOption) (*ReplyDisplayInfo, error)
	UpdateMeta(ctx context.Context, in *ReqDisplayMeta, opts ...client.CallOption) (*ReplyDisplayInfo, error)
	UpdateTags(ctx context.Context, in *ReqDisplayTags, opts ...client.CallOption) (*ReplyDisplayInfo, error)
	UpdateStatus(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateKeys(ctx context.Context, in *ReqDisplayKeys, opts ...client.CallOption) (*ReplyDisplayKeys, error)
	AppendKey(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayKeys, error)
	SubtractKey(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayKeys, error)
}

type displayService struct {
	c    client.Client
	name string
}

func NewDisplayService(name string, c client.Client) DisplayService {
	return &displayService{
		c:    c,
		name: name,
	}
}

func (c *displayService) AddOne(ctx context.Context, in *ReqDisplayAdd, opts ...client.CallOption) (*ReplyDisplayInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.AddOne", in)
	out := new(ReplyDisplayInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.GetOne", in)
	out := new(ReplyDisplayInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) GetByOrigin(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.GetByOrigin", in)
	out := new(ReplyDisplayInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) GetList(ctx context.Context, in *ReqDisplayList, opts ...client.CallOption) (*ReplyDisplayList, error) {
	req := c.c.NewRequest(c.name, "DisplayService.GetList", in)
	out := new(ReplyDisplayList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) GetByList(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyDisplayList, error) {
	req := c.c.NewRequest(c.name, "DisplayService.GetByList", in)
	out := new(ReplyDisplayList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyDisplayList, error) {
	req := c.c.NewRequest(c.name, "DisplayService.GetByFilter", in)
	out := new(ReplyDisplayList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "DisplayService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) UpdateBase(ctx context.Context, in *ReqDisplayUpdate, opts ...client.CallOption) (*ReplyDisplayInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.UpdateBase", in)
	out := new(ReplyDisplayInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) UpdateMeta(ctx context.Context, in *ReqDisplayMeta, opts ...client.CallOption) (*ReplyDisplayInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.UpdateMeta", in)
	out := new(ReplyDisplayInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) UpdateTags(ctx context.Context, in *ReqDisplayTags, opts ...client.CallOption) (*ReplyDisplayInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.UpdateTags", in)
	out := new(ReplyDisplayInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) UpdateStatus(ctx context.Context, in *RequestState, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "DisplayService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) UpdateKeys(ctx context.Context, in *ReqDisplayKeys, opts ...client.CallOption) (*ReplyDisplayKeys, error) {
	req := c.c.NewRequest(c.name, "DisplayService.UpdateKeys", in)
	out := new(ReplyDisplayKeys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) AppendKey(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayKeys, error) {
	req := c.c.NewRequest(c.name, "DisplayService.AppendKey", in)
	out := new(ReplyDisplayKeys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) SubtractKey(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyDisplayKeys, error) {
	req := c.c.NewRequest(c.name, "DisplayService.SubtractKey", in)
	out := new(ReplyDisplayKeys)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DisplayService service

type DisplayServiceHandler interface {
	AddOne(context.Context, *ReqDisplayAdd, *ReplyDisplayInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyDisplayInfo) error
	GetByOrigin(context.Context, *RequestInfo, *ReplyDisplayInfo) error
	GetList(context.Context, *ReqDisplayList, *ReplyDisplayList) error
	GetByList(context.Context, *RequestList, *ReplyDisplayList) error
	GetByFilter(context.Context, *RequestFilter, *ReplyDisplayList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateBase(context.Context, *ReqDisplayUpdate, *ReplyDisplayInfo) error
	UpdateMeta(context.Context, *ReqDisplayMeta, *ReplyDisplayInfo) error
	UpdateTags(context.Context, *ReqDisplayTags, *ReplyDisplayInfo) error
	UpdateStatus(context.Context, *RequestState, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateKeys(context.Context, *ReqDisplayKeys, *ReplyDisplayKeys) error
	AppendKey(context.Context, *RequestInfo, *ReplyDisplayKeys) error
	SubtractKey(context.Context, *RequestInfo, *ReplyDisplayKeys) error
}

func RegisterDisplayServiceHandler(s server.Server, hdlr DisplayServiceHandler, opts ...server.HandlerOption) error {
	type displayService interface {
		AddOne(ctx context.Context, in *ReqDisplayAdd, out *ReplyDisplayInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyDisplayInfo) error
		GetByOrigin(ctx context.Context, in *RequestInfo, out *ReplyDisplayInfo) error
		GetList(ctx context.Context, in *ReqDisplayList, out *ReplyDisplayList) error
		GetByList(ctx context.Context, in *RequestList, out *ReplyDisplayList) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyDisplayList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateBase(ctx context.Context, in *ReqDisplayUpdate, out *ReplyDisplayInfo) error
		UpdateMeta(ctx context.Context, in *ReqDisplayMeta, out *ReplyDisplayInfo) error
		UpdateTags(ctx context.Context, in *ReqDisplayTags, out *ReplyDisplayInfo) error
		UpdateStatus(ctx context.Context, in *RequestState, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateKeys(ctx context.Context, in *ReqDisplayKeys, out *ReplyDisplayKeys) error
		AppendKey(ctx context.Context, in *RequestInfo, out *ReplyDisplayKeys) error
		SubtractKey(ctx context.Context, in *RequestInfo, out *ReplyDisplayKeys) error
	}
	type DisplayService struct {
		displayService
	}
	h := &displayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DisplayService{h}, opts...))
}

type displayServiceHandler struct {
	DisplayServiceHandler
}

func (h *displayServiceHandler) AddOne(ctx context.Context, in *ReqDisplayAdd, out *ReplyDisplayInfo) error {
	return h.DisplayServiceHandler.AddOne(ctx, in, out)
}

func (h *displayServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyDisplayInfo) error {
	return h.DisplayServiceHandler.GetOne(ctx, in, out)
}

func (h *displayServiceHandler) GetByOrigin(ctx context.Context, in *RequestInfo, out *ReplyDisplayInfo) error {
	return h.DisplayServiceHandler.GetByOrigin(ctx, in, out)
}

func (h *displayServiceHandler) GetList(ctx context.Context, in *ReqDisplayList, out *ReplyDisplayList) error {
	return h.DisplayServiceHandler.GetList(ctx, in, out)
}

func (h *displayServiceHandler) GetByList(ctx context.Context, in *RequestList, out *ReplyDisplayList) error {
	return h.DisplayServiceHandler.GetByList(ctx, in, out)
}

func (h *displayServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyDisplayList) error {
	return h.DisplayServiceHandler.GetByFilter(ctx, in, out)
}

func (h *displayServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.DisplayServiceHandler.GetStatistic(ctx, in, out)
}

func (h *displayServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.DisplayServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *displayServiceHandler) UpdateBase(ctx context.Context, in *ReqDisplayUpdate, out *ReplyDisplayInfo) error {
	return h.DisplayServiceHandler.UpdateBase(ctx, in, out)
}

func (h *displayServiceHandler) UpdateMeta(ctx context.Context, in *ReqDisplayMeta, out *ReplyDisplayInfo) error {
	return h.DisplayServiceHandler.UpdateMeta(ctx, in, out)
}

func (h *displayServiceHandler) UpdateTags(ctx context.Context, in *ReqDisplayTags, out *ReplyDisplayInfo) error {
	return h.DisplayServiceHandler.UpdateTags(ctx, in, out)
}

func (h *displayServiceHandler) UpdateStatus(ctx context.Context, in *RequestState, out *ReplyInfo) error {
	return h.DisplayServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *displayServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.DisplayServiceHandler.RemoveOne(ctx, in, out)
}

func (h *displayServiceHandler) UpdateKeys(ctx context.Context, in *ReqDisplayKeys, out *ReplyDisplayKeys) error {
	return h.DisplayServiceHandler.UpdateKeys(ctx, in, out)
}

func (h *displayServiceHandler) AppendKey(ctx context.Context, in *RequestInfo, out *ReplyDisplayKeys) error {
	return h.DisplayServiceHandler.AppendKey(ctx, in, out)
}

func (h *displayServiceHandler) SubtractKey(ctx context.Context, in *RequestInfo, out *ReplyDisplayKeys) error {
	return h.DisplayServiceHandler.SubtractKey(ctx, in, out)
}
