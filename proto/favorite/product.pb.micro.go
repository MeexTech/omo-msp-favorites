// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/favorite/product.proto

package favorite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductService service

type ProductService interface {
	AddOne(ctx context.Context, in *ReqProductAdd, opts ...client.CallOption) (*ReplyProductInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyProductInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyProductList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateBase(ctx context.Context, in *ReqProductUpdate, opts ...client.CallOption) (*ReplyProductInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) AddOne(ctx context.Context, in *ReqProductAdd, opts ...client.CallOption) (*ReplyProductInfo, error) {
	req := c.c.NewRequest(c.name, "ProductService.AddOne", in)
	out := new(ReplyProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyProductInfo, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetOne", in)
	out := new(ReplyProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyProductList, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetByFilter", in)
	out := new(ReplyProductList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ProductService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UpdateBase(ctx context.Context, in *ReqProductUpdate, opts ...client.CallOption) (*ReplyProductInfo, error) {
	req := c.c.NewRequest(c.name, "ProductService.UpdateBase", in)
	out := new(ReplyProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ProductService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	AddOne(context.Context, *ReqProductAdd, *ReplyProductInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyProductInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyProductList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateBase(context.Context, *ReqProductUpdate, *ReplyProductInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		AddOne(ctx context.Context, in *ReqProductAdd, out *ReplyProductInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyProductInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyProductList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateBase(ctx context.Context, in *ReqProductUpdate, out *ReplyProductInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) AddOne(ctx context.Context, in *ReqProductAdd, out *ReplyProductInfo) error {
	return h.ProductServiceHandler.AddOne(ctx, in, out)
}

func (h *productServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyProductInfo) error {
	return h.ProductServiceHandler.GetOne(ctx, in, out)
}

func (h *productServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyProductList) error {
	return h.ProductServiceHandler.GetByFilter(ctx, in, out)
}

func (h *productServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.ProductServiceHandler.GetStatistic(ctx, in, out)
}

func (h *productServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.ProductServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *productServiceHandler) UpdateBase(ctx context.Context, in *ReqProductUpdate, out *ReplyProductInfo) error {
	return h.ProductServiceHandler.UpdateBase(ctx, in, out)
}

func (h *productServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ProductServiceHandler.RemoveOne(ctx, in, out)
}
